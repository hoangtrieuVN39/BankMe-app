// Mocks generated by Mockito 5.4.5 from annotations
// in app/test/transaction_validation_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:app/entities/entities.dart' as _i2;
import 'package:app/services/http/repositories/transaction_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTransaction_0 extends _i1.SmartFake implements _i2.Transaction {
  _FakeTransaction_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [TransactionRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTransactionRepository extends _i1.Mock
    implements _i3.TransactionRepository {
  @override
  _i4.Future<List<_i2.Transaction>> requestTransactionsByAccount(
    _i2.Account? account,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#requestTransactionsByAccount, [account]),
            returnValue: _i4.Future<List<_i2.Transaction>>.value(
              <_i2.Transaction>[],
            ),
            returnValueForMissingStub: _i4.Future<List<_i2.Transaction>>.value(
              <_i2.Transaction>[],
            ),
          )
          as _i4.Future<List<_i2.Transaction>>);

  @override
  _i4.Future<_i2.Transaction> requestTransactionByID(int? id) =>
      (super.noSuchMethod(
            Invocation.method(#requestTransactionByID, [id]),
            returnValue: _i4.Future<_i2.Transaction>.value(
              _FakeTransaction_0(
                this,
                Invocation.method(#requestTransactionByID, [id]),
              ),
            ),
            returnValueForMissingStub: _i4.Future<_i2.Transaction>.value(
              _FakeTransaction_0(
                this,
                Invocation.method(#requestTransactionByID, [id]),
              ),
            ),
          )
          as _i4.Future<_i2.Transaction>);

  @override
  _i4.Future<bool> checkRecipientExists(int? recipientAccountId) =>
      (super.noSuchMethod(
            Invocation.method(#checkRecipientExists, [recipientAccountId]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> checkSenderExists(int? accountId) =>
      (super.noSuchMethod(
            Invocation.method(#checkSenderExists, [accountId]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);

  @override
  _i4.Future<bool> verifyTransactionReception(_i2.Transaction? transaction) =>
      (super.noSuchMethod(
            Invocation.method(#verifyTransactionReception, [transaction]),
            returnValue: _i4.Future<bool>.value(false),
            returnValueForMissingStub: _i4.Future<bool>.value(false),
          )
          as _i4.Future<bool>);
}
